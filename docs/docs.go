// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag at
// 2020-04-10 04:07:54.370192 +0900 KST m=+0.051982056

package docs

import (
	"bytes"
	"encoding/json"
	"strings"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{.Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "license": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth/": {
            "post": {
                "description": "Authenticate an user with given information, to get a jwt token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Authenticate an user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Username or Email",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Password",
                        "name": "password",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Valid information, authenticated",
                        "schema": {
                            "$ref": "#/definitions/controllers.AuthenticatedResponse"
                        }
                    },
                    "400": {
                        "description": "Wrong format or invalid information",
                        "schema": {
                            "$ref": "#/definitions/controllers.TypicalErrorResponse"
                        }
                    }
                }
            }
        },
        "/profile/": {
            "get": {
                "description": "Get a requested user's profile",
                "produces": [
                    "application/json"
                ],
                "summary": "Get my profile",
                "responses": {
                    "200": {
                        "description": "When request to other's profile",
                        "schema": {
                            "$ref": "#/definitions/controllers.MyProfileResponse"
                        }
                    },
                    "404": {}
                }
            },
            "delete": {
                "description": "Update my profile with given information",
                "produces": [
                    "application/json"
                ],
                "summary": "Update my profile",
                "responses": {
                    "200": {
                        "description": "No errors occurred, profile was successfully removed",
                        "schema": {
                            "$ref": "#/definitions/controllers.EmptyResponse"
                        }
                    },
                    "400": {
                        "description": "Wrong password",
                        "schema": {
                            "$ref": "#/definitions/controllers.TypicalErrorResponse"
                        }
                    }
                }
            },
            "patch": {
                "description": "Update my profile with given information",
                "produces": [
                    "application/json"
                ],
                "summary": "Update my profile",
                "responses": {
                    "200": {
                        "description": "No errors occurred, profile was successfully updated",
                        "schema": {
                            "$ref": "#/definitions/controllers.EmptyResponse"
                        }
                    },
                    "400": {
                        "description": "Wrong format or invalid information",
                        "schema": {
                            "$ref": "#/definitions/controllers.TypicalErrorResponse"
                        }
                    }
                }
            }
        },
        "/profile/:username": {
            "get": {
                "description": "Get a profile by username with given information",
                "produces": [
                    "application/json"
                ],
                "summary": "Get a profile by username",
                "responses": {
                    "200": {
                        "description": "When request to other's profile",
                        "schema": {
                            "$ref": "#/definitions/controllers.PublicProfileResponse"
                        }
                    },
                    "404": {
                        "description": "No such user",
                        "schema": {
                            "$ref": "#/definitions/controllers.EmptyResponse"
                        }
                    }
                }
            }
        },
        "/register/": {
            "post": {
                "description": "Register an user with given information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Register an user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Email",
                        "name": "email",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Username",
                        "name": "username",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Password",
                        "name": "password",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "RSA 2048 PublicKey",
                        "name": "publicKey",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Nickname",
                        "name": "nickname",
                        "in": "path"
                    },
                    {
                        "type": "string",
                        "description": "Bio",
                        "name": "bio",
                        "in": "path"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User account created",
                        "schema": {
                            "$ref": "#/definitions/controllers.EmptyResponse"
                        }
                    },
                    "400": {
                        "description": "Normal Form error, like username duplicate",
                        "schema": {
                            "$ref": "#/definitions/controllers.TypicalErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "controllers.AuthenticatedResponse": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string"
                }
            }
        },
        "controllers.EmptyResponse": {
            "type": "object"
        },
        "controllers.MyProfileResponse": {
            "type": "object",
            "properties": {
                "bio": {
                    "type": "string",
                    "example": "Think Different"
                },
                "follower_username": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "[\"mark_zuckerberg\"",
                        " \"the_great_edison\"",
                        " \"tim_cook\"]"
                    ]
                },
                "following_username": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "[\"mark_zuckerberg\"",
                        " \"bob_dylan\"",
                        " \"michael_jackson\"]"
                    ]
                },
                "my_keys": {
                    "type": "string",
                    "example": "{\"encrypted_master_key\": \u003ca aes-256 master key encrypted with user's password\u003e,\"encrypted_private_key\": \u003ca rsa-2048 private key encrypted with master key\u003e,\"encrypted_contents_key\": \u003ca aes-256 contents key encrypted with master key\u003e,\"encrypted_following_key\": [{\"mark_zuckerberg\":\u003ca aes-256 mark_zuckerberg's contents key encrypted with master key\u003e,\"bob_dylan\":\u003ca aes-256 bob_dylan's contents key encrypted with master key\u003e,\"michael_jackson\":\u003ca aes-256 michael's contents key encrypted with master key\u003e}]}"
                },
                "nickname": {
                    "type": "string",
                    "example": "Steve Jobs"
                },
                "picture_url": {
                    "type": "string",
                    "example": "some kind of aws s3 url"
                },
                "public_key": {
                    "type": "string",
                    "example": "-----BEGIN PUBLIC KEY-----MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAhTGv0frCyyhs3Xs5LyHE4NXcM5lMqGJGNqCBo6zzjgv5BtZE5/bUHmJ8moUwTLLehtQt+wLq51wyJLe361423QNGO+5TCrKNWrOAxKhTRLwlHSjiXC/RgxbFYeD0EXGi54AwQRs27VFgzPRP7q4OMtrXIinzqhhtJTorpP8t4n9FVXrpDmJnTbF5ct/3L+hCyeWmgAsrML3rHqJ+zfw1DGogIrljdcLPzdlIcH9QjQJaWnfL7usl546aU0gkKjlUcB5+HUPNPkN3z9LEouHiKt8yVspTqyhnMnTNQnmGG7TuVCnWPXWaBaI/Aozgilj3+BIo9SiUIqKfc0FPeV61LQIDAQAB-----END PUBLIC KEY-----"
                },
                "username": {
                    "type": "string",
                    "example": "jobs_the_future"
                }
            }
        },
        "controllers.PublicProfileResponse": {
            "type": "object",
            "properties": {
                "bio": {
                    "type": "string",
                    "example": "Hi, I'm the great mengmota!"
                },
                "follower_cnt": {
                    "type": "integer",
                    "example": 0
                },
                "following_cnt": {
                    "type": "integer",
                    "example": 0
                },
                "nickname": {
                    "type": "string",
                    "example": "TheGreatMengmota"
                },
                "pictureURL": {
                    "type": "string",
                    "example": "some kind of aws s3 url"
                },
                "username": {
                    "type": "string",
                    "example": "testuser"
                }
            }
        },
        "controllers.TypicalErrorResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "msg": {
                    "type": "string"
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "",
	Host:        "",
	BasePath:    "",
	Schemes:     []string{},
	Title:       "",
	Description: "",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
